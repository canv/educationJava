// Задание в конце второй главы
// нужно вычислить простые числа от 2 до 100
package pack2ch;

public class ch2_2_100 {
    public static void main(String[] args) {
        int i, j;
        boolean isPrime;
        for (i = 2; i < 200; i++) {
            isPrime = true;
            for (j = 2; j <= i / j; j++)
/*

Это то же самое что и for (j = 2; j <= Math.sqrt(i); j++)
Существует что-то типа теоремы (далее своими словами):

"Если у числа(i) не найден делитель(j)
ДО ЧИСЛА соответствующего его корню(Math.sqrt(i) или i / j)
то дальше целый делитель уже НЕ БУДЕТ НАЙДЕН,
и число являеться простым"

Выходит что Math.sqrt(i) это оптимизация, если по простому
то цикл (11я строка) выглядел бы так:
for (j = 2; j < i; j++)

Цикл бы просто переберал все делители от 2 до i-1, и если бы находил
целые делители то, как я понял, присваивал бы isPrime знач false,
а если бы не находил такие делители то число считалось бы простым
(т.к. Любое число делиться на себя (благодаря j < i мы учитываем это)
и на 1(изначальное значение j = 2)) и выводилось на экран,
благодаря заданному isPrime = true перед началом цикла
(всё та же 11я строка)

*/
                if ((i % j) == 0) isPrime = false;
            if (isPrime) System.out.println(i);
        }
    }
}



